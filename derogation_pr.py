# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Projet
                                 A QGIS plugin
 projet de derogation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by geoinfo
        email                : geoinfo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import random

import qgis
from qgis import processing
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from qgis._core import QgsFields, QgsField, QgsVectorFileWriter, QgsFeature, QgsGeometry, QgsWkbTypes, \
    QgsCoordinateReferenceSystem, QgsPointXY, QgsProject
from qgis.utils import iface
from wx.lib.editor import selection

from .resources import *
# Import the code for the dialog
from .derogation_pr_dialog import ProjetDialog
import os.path




class Projet:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Projet_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&projet_derogation')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Projet', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/derogation_pr/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&projet_derogation'),
                action)
            self.iface.removeToolBarIcon(action)

    #fct pour creer un dossier afin de stocker le shapefile
    def create_folder(self):
        #get name from ui
        self.nom = str(self.dlg.nom.text())
        #path parent
        parent_dir = "D:/shapefile/"
        i=0
        p = len(os.listdir('D:/shapefile/'))
        while i<p:
            if self.nom == os.listdir('D:/shapefile/')[i]:
                self.nom=self.nom+str(i)
                os.path.join(parent_dir, self.nom)
            i += 1
        directory = self.nom
        # Path
        path = os.path.join(parent_dir, directory)
        # Create the directory
        os.mkdir(path)

    def create_shapefile(self):
        self.create_folder()
        #initiation des valeurs
        x = float(self.dlg.valeurX.text())
        y = float(self.dlg.valeurY.text())
        # path pour l'enregistrement
        path = 'D:/shapefile/'+ self.nom +'/'+ self.nom+'.shp'
        # creation des champs
        layerFields = QgsFields()
        layerFields.append(QgsField('ID', QVariant.Int))
        layerFields.append(QgsField('Valeur X', QVariant.Double))
        layerFields.append(QgsField('Valeur Y', QVariant.Double))
        # write the layer in qgis
        writer = QgsVectorFileWriter(path, 'UTF-8', layerFields, QgsWkbTypes.Point,
                                     QgsCoordinateReferenceSystem('EPSG:26191'), 'ESRI Shapefile')
        # add features
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
        feature.setAttributes([1,x,y])
        writer.addFeature(feature)
        iface.addVectorLayer(path, '', 'ogr')
        # delete the writer to flush features to disk
        del (writer)

    def create_buffer(self):
        layer = self.iface.activeLayer()
        outFile = 'D:/shapefile/' + self.nom + '/buffer' +'_'+ self.nom + '.shp'
        distance = float(self.dlg.valeur_buffer.text())
        fields = layer.fields()
        feats = layer.getFeatures()
        writer = QgsVectorFileWriter(outFile, 'UTF-8', fields,QgsWkbTypes.Polygon, layer.sourceCrs(), 'ESRI Shapefile')
        for feat in feats:
            geom = feat.geometry()
            buffer = geom.buffer(distance, 2)
            feat.setGeometry(buffer)
            writer.addFeature(feat)
        iface.addVectorLayer(outFile, '', 'ogr')
        del (writer)
        self.iface.actionZoomToSelected().trigger()

    def intersection(self):
        # layer1 = QgsProject.instance().mapLayersByName('buffer_XX')[0]
        # layer2 = QgsProject.instance().mapLayersByName('Derogation_central_13_avril')[0]
        #
        # a = processing.run("qgis:intersection", {
        #     "INPUT": layer1,
        #     "PREDICATE": 0,
        #     "INTERSECT": layer2,
        #
        # })

        selectedLayerIndex = QgsProject.instance().mapLayersByName('buffer_XX')[0]
        selectedLayer = QgsProject.instance().mapLayersByName('Derogation_central_13_avril')[0]
        features = []
        i = random.randint(1, 100000)
        count = 0
        for sel in selectedLayerIndex.getFeatures():
            for f in selectedLayer.getFeatures():
                if sel.geometry().intersects(f.geometry()):
                    count = count + 1
                    features.append(f.id())
                else:
                    pass
        selFeat = selectedLayer.select(features)
        self.iface.actionZoomToSelected().trigger()
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ProjetDialog()

        self.dlg.page1.clicked.connect(lambda: self.dlg.stackedWidget.setCurrentWidget(self.dlg.page_2))
        self.dlg.next.clicked.connect(lambda: self.dlg.stackedWidget.setCurrentWidget(self.dlg.page_3))
        self.dlg.retour1.clicked.connect(lambda: self.dlg.stackedWidget.setCurrentWidget(self.dlg.page))
        self.dlg.page2.clicked.connect(lambda: self.dlg.stackedWidget.setCurrentWidget(self.dlg.page_3))
        self.dlg.acceuil.clicked.connect(lambda: self.dlg.stackedWidget.setCurrentWidget(self.dlg.page))
        #self.dlg.label_12.setStyleSheet("image: url(4567.jpg)")

        self.dlg.create.clicked.connect(self.create_shapefile)
        self.dlg.calcul.clicked.connect(self.create_buffer)

        self.dlg.pushButton_5.clicked.connect(self.intersection)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
